use num_bigint::BigUint;
use rand::Rng;

fn digit_sum(mut n: BigUint) -> u32 {
    let mut sum = 0u32;
    while n > BigUint::from(0u32) {
        let digit = (n.clone() % BigUint::from(10u32)).iter_u32_digits().next().unwrap_or_default();
        sum += digit;
        n /= BigUint::from(10u32);
    }
    sum
}

fn check(mut n: BigUint) -> u32 {
    for i in 0..50 {
        let prev = n.clone();
        n *= BigUint::from(2u32);
        let sum1 = digit_sum(prev.clone());
        let sum2 = digit_sum(n.clone());
        println!("{} {}", sum1, sum2);
        if sum1 <= sum2 {
            return i;
        }
    }
    50
}

fn main() {
    let x = "888178419700125232338905334472656250004707345624410663731396198272705078125000630606677987088914960622787475585937500077271522513910895213484764099121093750004440892098500626161694526672363281250000390798504668055102229118347167968750000046185277824406512081623077392578125000008260059303211164660751819610595703125000035527136788005009293556213378906250000046185277824406512081623077392578125000005417888360170763917267322540283203125000754951656745106447488069534301757812500015099033134902128949761390686035156250005861977570020826533436775207519531250000301980662698042578995227813720703125000073718808835110394284129142761230468750005329070518200751394033432006835937500000062172489379008766263723373413085937500076383344094210769981145858764648437500005950795411990839056670665740966796875000133226762955018784850835800170898437500082600593032111646607518196105957031250001953992523340275511145591735839843750000079936057773011270910501480102539062500079047879353311145678162574768066406250001865174681370262987911701202392578125000035527136788005009293556213378906250000065725203057809267193078994750976562500005151434834260726347565650939941406250000772715225139108952134847640991210937500029309887850104132667183876037597656250007194245199571014381945133209228515625000479616346638067625463008880615234375000070166095156309893354773521423339843750005684341886080801486968994140625000000000079936057773011270910501480102539062500069277916736609768122434616088867187500001598721155460225418210029602050781250000737188088351103942841291427612304687500080824236192711396142840385437011718750006128431095930864103138446807861328125000159872115546022541821002960205078125000050626169922907138243317604064941406250006306066779870889149606227874755859375000239808173319033812731504440307617187500075495165674510644748806953430175781250003197442310920450836420059204101562500000399680288865056354552507400512695312500080824236192711396142840385437011718750001687538997430237941443920135498046875000017763568394002504646778106689453125000012434497875801753252744674682617187500003286260152890463359653949737548828125000550670620214077644050121307373046875000082600593032111646607518196105957031250002398081733190338127315044403076171875000301980662698042578995227813720703125000000888178419700125232338905334472656250001243449787580175325274467468261718750000275335310107038822025060653686523437500037303493627405259758234024047851562500001598721155460225418210029602050781250000142108547152020037174224853515625000000086153306710912147536873817443847656250007727152251391089521348476409912109375000266453525910037569701671600341796875000011546319456101628020405769348144531250006128431095930864103138446807861328125000168753899743023794144392013549804687500016875389974302379414439201354980468750000799360577730112709105014801025390625000417443857259058859199285507202148437500011546319456101628020405769348144531250004618527782440651208162307739257812500000568434188608080148696899414062500000000042632564145606011152267456054687500000006750155989720951765775680541992187500000470734562441066373139619827270507812500079936057773011270910501480102539062500008792966355031239800155162811279296875000799360577730112709105014801025390625000037303493627405259758234024047851562500002309263891220325604081153869628906250000470734562441066373139619827270507812500018651746813702629879117012023925781250008348877145181177183985710144042968750000213162820728030055761337280273437500000072830630415410269051790237426757812500002930988785010413266718387603759765625000515143483426072634756565093994140625000060396132539608515799045562744140625000004263256414560601115226745605468750000000772715225139108952134847640991210937500015987211554602254182100296020507812500004884981308350688777863979339599609375000106581410364015027880668640136718750000055955240441107889637351036071777343750008171241461241152137517929077148437500000781597009336110204458236694335937500000061284310959308641031384468078613281250006750155989720951765775680541992187500";
    // let mut rng = rand::thread_rng();
    // let exp = BigUint::from(10u32).pow(40);
    // for _ in 0..1 {
    //     let mut a = BigUint::from(5u32).pow(50);
    //     // let b = BigUint::from(5u32).pow(50);
    //     for _ in 0..100 {
    //         let c = BigUint::from(rng.gen_range(1..100u32)) * BigUint::from(5u32).pow(50);
    //         a *= &exp;
    //         a += c;
    //     }
    //     let n = a.clone();
    //     println!("{}", n);
    //     let res = check(n);
    //     println!("{}", res);
    // }
    let n = x.parse::<BigUint>().unwrap();
    println!("{}", check(n));
}
